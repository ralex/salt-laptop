# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    function color_my_prompt {
        myuser=$(whoami)
        local __user="\[\033[38;5;255m\]\[\033[48;5;24m\]\u\[$(tput sgr0)\]"
        if [ $myuser = "root" ]; then
            local __user="\[\033[38;5;255m\]\[\033[48;5;196m\]\u\[$(tput sgr0)\]"
        fi
        local __at="\[\033[38;5;232m\]\[\033[48;5;15m\]@\[$(tput sgr0)\]"
        myhostname=$(hostname)
        case $myhostname in
            "cocoon" )
                local __host="\[\033[38;5;255m\]\[\033[48;5;39m\]\h\[$(tput sgr0)\]"
                ;;
            "zeke" )
                local __host="\[\033[38;5;255m\]\[\033[48;5;208m\]\h\[$(tput sgr0)\]"
                ;;
            "sahelanthropus")
                local __host="\[\033[38;5;255m\]\[\033[48;5;54m\]\h\[$(tput sgr0)\]"
                ;;
            * )
                local __host="\[\033[38;5;255m\]\[\033[48;5;24m\]\h\[$(tput sgr0)\]"
                ;;
            esac
        local __cur_location="\[\033[38;5;232m\]\[\033[48;5;15m\] \w\[$(tput sgr0)\]"
        local __git_branch_color="\[\033[00m\]\[\033[33m\]"
        local __git_branch='$(__git_ps1)'
        local __prompt_tail="\[$(tput bold)\]\[\033[38;5;24m\]\\$\[$(tput sgr0)\]"
        local __last_color="\[\033[00m\]"
        export PS1="$__user$__at$__host$__cur_location$__git_branch_color$__git_branch $__prompt_tail$__last_color "
    }
    color_my_prompt
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -larth'
alias lll='ls -larth'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# manage proxy configuration system wide
# source ~/.proxyrc && setproxy

export PATH="$PATH:$HOME/.scripts:$HOME/.local/bin"

export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt

# Kubernetes completion + krew path
source <(kubectl completion bash)
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Minikube completion
source <(minikube completion bash)

# Molecule ccompletion
eval "$(_MOLECULE_COMPLETE=source molecule)"

for file in ~/.bashrc.d/*.bashrc;
do
source $file
done

# For i3 and gnome3 better integration
export XDG_CURRENT_DESKTOP=GNOME

export VISUAL=vim
export EDITOR="$VISUAL"
